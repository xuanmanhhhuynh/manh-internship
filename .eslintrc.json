{
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "simple-import-sort", "import"],
  "extends": ["next/core-web-vitals", "eslint:recommended", "plugin:@typescript-eslint/recommended"],
  "ignorePatterns": [".eslintrc.js", "vitest.config.ts", "tailwind.config.js", "i18n.ts"],
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      },
      "typescript": {
        "alwaysTryTypes": true,
        "project": "./tsconfig.json"
      }
    }
  },
  "overrides": [
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "parserOptions": {
        "project": ["./tsconfig.json"]
      },
      "rules": {
        "no-console": "error",
        "prefer-const": "error",
        "curly": "off",
        "comma-dangle": [
          "error",
          { "arrays": "never", "objects": "never", "imports": "never", "exports": "never", "functions": "never" }
        ],
        "no-unused-vars": "off",
        "no-case-declarations": "off",
        "padding-line-between-statements": [
          "error",
          { "blankLine": "always", "prev": "*", "next": "return" },
          { "blankLine": "always", "prev": ["const", "let", "var"], "next": "*" },
          { "blankLine": "any", "prev": ["const", "let", "var"], "next": ["const", "let", "var"] },
          { "blankLine": "always", "prev": "directive", "next": "*" },
          { "blankLine": "any", "prev": "directive", "next": "directive" }
        ],
        "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "variable",
            "types": ["boolean"],
            "format": ["PascalCase"],
            "prefix": ["is", "should", "has", "can", "did", "will"],
            "filter": {
              // NextJs|Next-Intl
              "regex": "^(dynamicParams|revalidate|localeDetection)$",
              "match": false
            }
          },
          {
            "selector": "interface",
            "format": ["PascalCase"],
            "custom": { "regex": "^I[A-Z]", "match": true },
            "filter": { "regex": "^(Window)$", "match": false }
          },
          { "selector": "class", "format": ["PascalCase"] },
          { "selector": "parameter", "format": ["camelCase"], "leadingUnderscore": "allow" },
          { "selector": "memberLike", "modifiers": ["private"], "format": ["camelCase"], "leadingUnderscore": "allow" },
          { "selector": "typeLike", "format": ["PascalCase", "UPPER_CASE"] }
        ],
        "import/first": "error",
        "import/newline-after-import": "error",
        "import/no-duplicates": "error",
        "import/no-unresolved": "error",
        "import/no-unused-modules": ["off", { "unusedExports": true }],
        "simple-import-sort/exports": "error",
        "simple-import-sort/imports": [
          "error",
          {
            "groups": [
              // `react` first, `next` second, then packages starting with a character
              ["^react$", "^next", "^[a-z]", "^@"],
              // Packages starting with `@/`
              ["^@/core-ui"],
              ["^@/libs"],
              ["^@/modules"],
              ["^@/components"],
              ["^@/navigation"],
              ["^@/common/hooks"],
              ["^@/common/components"],
              ["^@/common/constants"],
              ["^@/common/http"],
              ["^@/common/redux"],
              ["^@/common/utils"],
              ["^@/common/interfaces"],
              ["^@/locales"],
              ["^@/assets"],
              ["^@mocks", "^@tests"],
              // Packages starting with `~`
              ["^~"],
              // Imports starting with `../`
              ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
              // Imports starting with `./`
              ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
              // Style imports
              ["^.+\\.s?css$"],
              // Side effect imports
              ["^\\u0000"]
            ]
          }
        ],
        "react-hooks/exhaustive-deps": "off",
        "react/jsx-sort-props": [
          "warn",
          {
            "callbacksLast": true,
            "shorthandFirst": true,
            "ignoreCase": true,
            "reservedFirst": true,
            "noSortAlphabetically": true
          }
        ]
      }
    }
  ]
}
